{"version":3,"sources":["../../src/models/user.js"],"names":["UserSchema","Schema","username","type","String","required","unique","password","created_at","Date","updated_at","pre","next","user","isModified","isNew","genSalt","err","salt","hash","methods","comparePassword","pw","cb","compare","isMatch","User","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,aAAa,IAAI,mBAASC,MAAb,CAAoB;AACrCC,YAAU;AACRC,UAAMC,MADE;AAERC,cAAU,IAFF;AAGRC,YAAQ;AAHA,GAD2B;AAMrCC,YAAU;AACRJ,UAAMC,MADE;AAERC,cAAU;AAFF,GAN2B;AAUrCG,cAAYC,IAVyB;AAWrCC,cAAYD;AAXyB,CAApB,CAAnB;;AAcAT,WAAWW,GAAX,CAAe,MAAf,EAAuB,UAASC,IAAT,EAAe;AAClC,MAAIC,OAAO,IAAX;AACA,MAAIA,KAAKC,UAAL,CAAgB,UAAhB,KAA+BD,KAAKE,KAAxC,EAA+C;AAC7C,qBAAOC,OAAP,CAAe,EAAf,EAAmB,UAACC,GAAD,EAAMC,IAAN,EAAe;AAChC,UAAID,GAAJ,EAAS;AACP,eAAOL,KAAKK,GAAL,CAAP;AACD;AACD,uBAAOE,IAAP,CAAYN,KAAKN,QAAjB,EAA2BW,IAA3B,EAAiC,UAACD,GAAD,EAAME,IAAN,EAAe;AAChD,YAAIF,GAAJ,EAAS;AACP,iBAAOL,KAAKK,GAAL,CAAP;AACD;AACDJ,aAAKN,QAAL,GAAgBY,IAAhB;AACAP;AACD,OANC;AAOH,KAXC;AAYH,GAbC,MAaK;AACL,WAAOA,MAAP;AACD;AACF,CAlBD;;AAoBAZ,WAAWoB,OAAX,CAAmBC,eAAnB,GAAqC,UAACC,EAAD,EAAKC,EAAL,EAAY;AAC/C,mBAAOC,OAAP,CAAeF,EAAf,EAAmB,UAAKf,QAAxB,EAAkC,UAACU,GAAD,EAAMQ,OAAN,EAAkB;AAClD,QAAIR,GAAJ,EAAS;AACP,aAAOM,GAAGN,GAAH,CAAP;AACD;AACDM,OAAG,IAAH,EAASE,OAAT;AACD,GALD;AAMD,CAPD;;AASA,IAAIC,OAAO,mBAASC,KAAT,CAAe,MAAf,EAAuB3B,UAAvB,CAAX;kBACe0B,I","file":"user.js","sourcesContent":["import mongoose from 'mongoose';\nimport bcrypt from 'bcrypt';\n\nconst UserSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  created_at: Date,\n  updated_at: Date\n});\n\nUserSchema.pre('save', function(next) {\n    let user = this;\n    if (user.isModified('password') || user.isNew) {\n      bcrypt.genSalt(10, (err, salt) => {\n        if (err) {\n          return next(err);\n        }\n        bcrypt.hash(user.password, salt, (err, hash) => {\n        if (err) {\n          return next(err);\n        }\n        user.password = hash;\n        next();\n      });\n    });\n  } else {\n    return next();\n  }\n});\n\nUserSchema.methods.comparePassword = (pw, cb) => {\n  bcrypt.compare(pw, this.password, (err, isMatch) => {\n    if (err) {\n      return cb(err);\n    }\n    cb(null, isMatch);\n  });\n}\n\nlet User = mongoose.model('User', UserSchema);\nexport default User;"]}